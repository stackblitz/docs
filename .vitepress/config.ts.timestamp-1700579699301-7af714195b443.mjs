// .vitepress/config.ts
import dotenv from "file:///home/stackblitz/docs/node_modules/dotenv/lib/main.js";
import mdFootnote from "file:///home/stackblitz/docs/node_modules/markdown-it-footnote/index.js";
import { defineConfig } from "file:///home/stackblitz/docs/node_modules/vitepress/dist/node/index.js";

// docs/links.ts
var groupLinks = {
  userGuide: [
    { text: "What is StackBlitz", link: "/guides/user-guide/what-is-stackblitz" },
    { text: "Getting started", link: "/guides/user-guide/getting-started" },
    { text: "Starter projects", link: "/guides/user-guide/starter-projects" },
    { text: "Available environments", link: "/guides/user-guide/available-environments" },
    { text: "Importing projects", link: "/guides/user-guide/importing-projects" },
    { text: "IDE: what\u2019s on your screen", link: "/guides/user-guide/ide-whats-on-your-screen" },
    { text: "Collections", link: "/guides/user-guide/collections" },
    { text: "Keyboard shortcuts", link: "/guides/user-guide/keyboard-shortcuts" },
    { text: "General FAQs", link: "/guides/user-guide/general-faqs" }
  ],
  integrationGuide: [
    { text: "Embedding projects", link: "/guides/integration/embedding" },
    { text: "Launching projects from GitHub", link: "/guides/integration/open-from-github" },
    { text: "Creating projects with the SDK", link: "/guides/integration/create-with-sdk" },
    { text: "Bug reproductions", link: "/guides/integration/bug-reproductions" }
  ],
  codeflow: [
    { text: "What is Codeflow?", link: "/codeflow/what-is-codeflow" },
    { text: "Using pr.new", link: "/codeflow/using-pr-new" },
    { text: "Working in Codeflow IDE", link: "/codeflow/working-in-codeflow-ide" },
    { text: "Integrating CodeflowApp bot", link: "/codeflow/integrating-codeflowapp-bot" },
    { text: "Environment Variables", link: "/codeflow/environment-variables" },
    {
      text: "Content updates with Web Publisher",
      link: "/codeflow/content-updates-with-web-publisher"
    },
    { text: "Integrating Web Publisher", link: "/codeflow/integrating-web-publisher" },
    { text: "Codeflow FAQ", link: "/codeflow/codeflow-faq" }
  ],
  teams: [
    { text: "What is StackBlitz Teams", link: "/teams/what-is-stackblitz-teams.md" },
    { text: "Setting Up Your Team", link: "/teams/setting-up-your-team" },
    { text: "Collaboration and Access Control", link: "/teams/collaboration-and-access-control" },
    { text: "Pull Request Review Integration", link: "/teams/pull-request-review-integration" },
    { text: "Environment Variables", link: "/teams/environment-variables" },
    { text: "Private NPM Registry Integration", link: "/teams/private-npm-registry-integration" }
  ],
  api: [
    {
      text: "JavaScript SDK",
      link: "/platform/api/javascript-sdk",
      items: [
        { text: "SDK overview", link: "/platform/api/javascript-sdk" },
        { text: "Options reference", link: "/platform/api/javascript-sdk-options" },
        { text: "Controlling embeds", link: "/platform/api/javascript-sdk-vm" },
        { text: "Managing dependencies", link: "/platform/api/javascript-sdk-dependencies" }
      ]
    },
    { text: "POST API", link: "/platform/api/post-api" },
    { text: "WebContainer API", link: "/platform/api/webcontainer-api" }
  ],
  webcontainers: [
    { text: "Roadmap", link: "/platform/webcontainers/roadmap" },
    { text: "Browser support", link: "/platform/webcontainers/browser-support" },
    { text: "Browser configuration", link: "/platform/webcontainers/browser-config" },
    { text: "Project configuration", link: "/platform/webcontainers/project-config" },
    { text: "Turbo package manager", link: "/platform/webcontainers/turbo-package-manager" },
    { text: "Troubleshooting", link: "/platform/webcontainers/troubleshooting-webcontainers" }
  ],
  enterprise: [
    { text: "Overview", link: "/enterprise/overview" },
    {
      text: "Installation",
      link: "/enterprise/installation/quickstart",
      items: [
        { text: "Quickstart on Bare Metal", link: "/enterprise/installation/quickstart" },
        { text: "Quickstart on GCP (Non-GKE)", link: "/enterprise/installation/quickstart-gcp" },
        {
          text: "Quickstart (Existing Cluster)",
          link: "/enterprise/installation/quickstart-existing-cluster"
        },
        { text: "Administrator Guide", link: "/enterprise/installation/administrator-guide" },
        { text: "Air Gapped Installs", link: "/enterprise/installation/air-gapped-installs" }
      ]
    },
    { text: "Configuring DNS & TLS", link: "/enterprise/configuring-dns" },
    { text: "Configuring Firewall Rules", link: "/enterprise/configuring-firewall-rules" },
    { text: "Setting up SSO", link: "/enterprise/sso" },
    { text: "Setting up SSO with Okta", link: "/enterprise/okta-sso" },
    { text: "Setting up SSO with ADFS", link: "/enterprise/adfs-sso" },
    { text: "Connect npm Registry", link: "/enterprise/npm" },
    { text: "Starter Projects", link: "/enterprise/starter-projects" },
    { text: "User Management", link: "/enterprise/user-management" },
    { text: "Aggregating Logs", link: "/enterprise/log-aggregation" },
    { text: "Data Migration", link: "/enterprise/data-migration" }
  ]
};
var linkGroups = {
  userGuide: {
    text: "User Guide",
    items: groupLinks.userGuide
  },
  integrationGuide: {
    text: "Integration Guide",
    items: groupLinks.integrationGuide
  },
  codeflow: {
    text: "Codeflow",
    items: groupLinks.codeflow
  },
  teams: {
    text: "Teams",
    items: groupLinks.teams
  },
  api: {
    text: "StackBlitz API",
    items: groupLinks.api
  },
  webcontainers: {
    text: "WebContainers",
    items: groupLinks.webcontainers
  },
  enterprise: {
    text: "Enterprise Server",
    items: groupLinks.enterprise
  }
};
var defaultGroupLink = (linkGroup) => groupLinks[linkGroup][0].link;
var sidebarLinks = (sidebar, activeLinkGroups = []) => {
  if (sidebar === "enterprise") {
    return [linkGroups.enterprise];
  }
  return Object.entries(linkGroups).filter(([key]) => key !== "enterprise").map(([key, data]) => ({
    ...data,
    collapsed: !activeLinkGroups.includes(key)
  }));
};

// .vitepress/config.ts
dotenv.config();
var BASE = "/";
var BASE_WITH_ORIGIN = `https://developer.stackblitz.com${BASE}`;
var config_default = defineConfig({
  srcDir: "./docs",
  outDir: `./build${BASE}`,
  assetsDir: "assets",
  base: BASE,
  // Generate files as `/path/to/page.html` and URLs as `/path/to/page`
  cleanUrls: true,
  // Prevent builds when content has dead links
  ignoreDeadLinks: false,
  // Metadata
  lang: "en-US",
  title: "StackBlitz Docs",
  description: "Discover how to use StackBlitz, an online development environment for frontend, Node.js and the JavaScript ecosystem.",
  head: [
    ["link", { rel: "icon", type: "image/png", href: `${BASE}img/theme/favicon.png` }],
    ...getAnalyticsTags(process.env)
  ],
  // Sitemap
  lastUpdated: true,
  sitemap: {
    hostname: BASE_WITH_ORIGIN
  },
  /**
   * Generate social media metadata tags at build time.
   * Note: this does not run when using the development server,
   * so it must be tested by doing a full build with `npm run build`.
   */
  transformHead({ pageData, page }) {
    const { title, description, og_image } = pageData.frontmatter;
    const og_type = page === "index.md" ? "website" : "article";
    const tags = [];
    tags.push(["meta", { property: "og:type", content: og_type }]);
    tags.push(["meta", { property: "og:title", content: title }]);
    if (og_image) {
      const url = `${BASE_WITH_ORIGIN}img/og/${og_image}`;
      tags.push(["meta", { property: "og:image", content: url }]);
    }
    tags.push(["meta", { name: "twitter:site", content: "@StackBlitz" }]);
    tags.push(["meta", { name: "twitter:card", content: "summary_large_image" }]);
    tags.push(["meta", { name: "twitter:title", content: title }]);
    if (description) {
      tags.push(["meta", { name: "twitter:description", content: description }]);
    }
    return tags;
  },
  // Theme
  themeConfig: {
    siteTitle: "StackBlitz Docs",
    logo: "/img/theme/docs-logo.svg",
    search: getSearchConfig(process.env),
    editLink: {
      pattern: "https://pr.new/stackblitz/docs/edit/main/docs/:path",
      text: "Edit this page"
    },
    nav: [
      { text: "Guides", link: defaultGroupLink("userGuide") },
      { text: "Codeflow", link: defaultGroupLink("codeflow") },
      { text: "API", link: defaultGroupLink("api") },
      { text: "WebContainers", link: defaultGroupLink("webcontainers") },
      { text: "Teams", link: defaultGroupLink("teams") },
      { text: "Enterprise", link: defaultGroupLink("enterprise") }
    ],
    sidebar: {
      "/guides/": sidebarLinks("main", ["userGuide", "integrationGuide"]),
      "/codeflow/": sidebarLinks("main", ["codeflow"]),
      "/teams/": sidebarLinks("main", ["teams"]),
      "/platform/api/": sidebarLinks("main", ["api"]),
      "/platform/webcontainers/": sidebarLinks("main", ["webcontainers"]),
      "/enterprise/": sidebarLinks("enterprise", ["enterprise"])
    }
  },
  postRender(context) {
    context.teleports;
  },
  markdown: {
    config: (md) => {
      md.use(mdFootnote);
    }
  }
});
function getAnalyticsTags(env) {
  if (!env.VITE_GTM_ID) {
    return [];
  }
  return [
    [
      "script",
      { src: `https://www.googletagmanager.com/gtag/js?id=${env.VITE_GTM_ID}`, async: "" }
    ],
    [
      "script",
      {},
      `function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag('js',new Date),gtag('config','${env.VITE_GTM_ID}',{anonymize_ip:true})`
    ]
  ];
}
function getSearchConfig(env) {
  if (env.VITE_ALGOLIA_ID && env.VITE_ALGOLIA_KEY) {
    return {
      provider: "algolia",
      options: {
        indexName: "stackblitz",
        appId: env.VITE_ALGOLIA_ID,
        apiKey: env.VITE_ALGOLIA_KEY
      }
    };
  }
}
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
